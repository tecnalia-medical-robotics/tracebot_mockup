<?xml version="1.0"?>
<launch>

  <!--<arg name="table_length" default="2.0"/>
  <arg name="table_width" default="2.0"/>
  <arg name="table_height" default="1.0"/>
  <arg name="robot_mount_offset_x" default="0.0"/>
  <arg name="robot_mount_offset_y" default="-0.2"/>
  <arg name="robot_mount_offset_theta" default="0.0"/>
  <arg name="robot_mount_length" default="0.2"/>
  <arg name="robot_mount_width" default="0.2"/>
  <arg name="robot_mount_height" default="0.6"/>
  <arg name="robot_base_tilt" default="0.0"/>
  <arg name="pump_offset_x" default="0.0"/>
  <arg name="pump_offset_y" default="0.2"/>
  <arg name="pump_offset_theta" default="0.0"/>
  <arg name="pump_length" default="0.2"/>
  <arg name="pump_width" default="0.3"/>
  <arg name="pump_height" default="0.4"/>
  <arg name="left_arm" default="ur5e"/>
  <arg name="right_arm" default="ur5e"/>

  <param name="robot_description" command="$(find xacro)/xacro $(find tracebot_mockup_gazebo)/urdf/tracebot_mockup.urdf.xacro
    table_length:=$(arg table_length)
    table_width:=$(arg table_width)
    table_height:=$(arg table_height)
    robot_mount_offset_x:=$(arg robot_mount_offset_x)
    robot_mount_offset_y:=$(arg robot_mount_offset_y)
    robot_mount_offset_theta:=$(arg robot_mount_offset_theta)
    robot_mount_length:=$(arg robot_mount_length)
    robot_mount_width:=$(arg robot_mount_width)
    robot_mount_height:=$(arg robot_mount_height)
    robot_base_tilt:=$(arg robot_base_tilt)
    pump_offset_x:=$(arg pump_offset_x)
    pump_offset_y:=$(arg pump_offset_y)
    pump_offset_theta:=$(arg pump_offset_theta)
    pump_length:=$(arg pump_length)
    pump_width:=$(arg pump_width)
    pump_height:=$(arg pump_height)
    left_arm:=$(arg left_arm)
    right_arm:=$(arg right_arm)
    "/>

  <node name="robot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model tracebot_mockup -x 0 -y 0 -z 0"/>

  <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  node name="rviz" pkg="rviz" type="rviz" args="-d $(find tracebot_mockup_description)/config/tracebot_mockup.rviz"/-->
  
  <!-- UR Launch parameters taken from .lanunch file from ur package. See ur_description/launch -->
  
  <!--Robot description and related parameter files -->
  <arg name="robot_description_file" default="$(find ur_gazebo)/lanunch/inc/load_ur5e.launch.xml" doc="Launch file which populates the 'robot_description' parameter."/>
  <arg name="joint_limit_params" default="$(find ur_description)/config/ur5e/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/ur5e/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/ur5e/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/ur5e/visual_parameters.yaml"/>

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find tracebot_mockup_gazebo)/config/left_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="joint_group_pos_controller" doc="Controllers that are initally loaded, but not started."/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="left_" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="500" doc="Rate at which robot_state_publisher should publish transforms."/>
  
  <!-- Robot state publisher -->
  <!--node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"/-->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>
  
  <!--============================================================================================================-->
  <param name="robot_description" command="$(find xacro)/xacro $(find tracebot_mockup_gazebo)/urdf/tracebot_mockup.urdf.xacro" />
  <!-- Start the 'driver' (ie: Gazebo in this case) -->
  <include file="$(find ur_gazebo)/launch/inc/ur_control.launch.xml">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="gui" value="true"/>
    <arg name="paused" value="true"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
  </include>
  
  <!--include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find tracebot_mockup_gazebo)/worlds/tracebot_mockup_world.world"/>
    <arg name="paused" value="true"/>
  </include-->
  
  <!-- Convert an xacro and put on parameter server >
<param name="robot_description" command="$(find xacro)/xacro $(find pr2_description)/robots/pr2.urdf.xacro" />

< Spawn a robot into Gazebo >
<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model pr2" /-->

</launch>
